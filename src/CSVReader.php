<?php
/**
 * Created by PhpStorm.
 * User: zsim0n
 * Date: 16/11/14
 * Time: 23:15
 */

namespace zsim0n\JyskeBank;

use League\Csv\Reader;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;


class CSVReader extends Reader {

    public static function createFromPath($path, $open_mode = 'r+')
    {
        $fs = new Filesystem();
        if ($fs->exists($path)) {
            FilterTranscode::register();
            $reader = parent::createFromPath($path); // TODO: Change the autogenerated stub
            $reader->setDelimiter(';');
            $reader->setEnclosure('"');
            $reader->setEscape('\\');
            $reader->setFlags(\SplFileObject::READ_AHEAD);
            if ($reader->isActiveStreamFilter()) {
                $reader->appendStreamFilter(FilterTranscode::FILTER_NAME . "iso-8859-1:utf-8");
            }
        } else {
            throw new \Exception("<error>File $path doesn't exists!</error>");
        }
        return $reader;
    }

    public function getHead() {
        $heading = $this->fetchOne(0);
        $heading = array_map(function ($value) {
            return empty($value) ? uniqid('field_') : $value;
        }, $heading);
        return $heading;
    }
    private function _removeComma($text) {
        return str_replace(',', ' ', $text);
    }

    private function _splitSubjectText($text) {
        if (preg_match_all("/^(DK\s\d{5}|\d{2}\.\d{2}\.\d{2}|BS)\s(.*)$/", $text, $matches, PREG_PATTERN_ORDER)) {
            return array($matches[0][0], $matches[1][0], $matches[2][0]);
        } else {
            return array('', '', $text);
        }
    }

    public function getDate($value, $format = 'd/m/Y') {
        $date = \DateTime::createFromFormat('d.m.Y', $value);
        return ($date instanceof \DateTime) ? $date->format($format) : '';
    }

    public function getPayee($value) {
        return $this->_removeComma($this->_splitSubjectText($value)[2]);
    }

    public function getMemo($value) {
        return $this->_removeComma($this->_splitSubjectText($value)[1]);
    }

    public function getCurrency($value) {
        $fmt = new \NumberFormatter('da-DK', \NumberFormatter::DECIMAL);
        $r = $fmt->parse($value);
        if (intl_is_failure($fmt->getErrorCode())) {
            throw new \Exception('Invalid Currency Format');
        }
        return $r;
    }

    public function getOutflow($value) {
        $r = $this->getCurrency($value);
        return ($r <= 0) ? $r * (-1) : '';
    }

    public function getInflow($value) {
        $r = $this->getCurrency($value);
        return ($r > 0) ? $r : '';
    }
} 